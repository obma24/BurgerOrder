Engineering Diary (Individual Assignment):
Name: M Mamoon Almorad 
(mbal24)


Week 1: Setting Up Configuration Management with GitHub
During the first week, my group and I worked on installing a configuration management tool, specifically GitHub. We started by downloading the latest version of GitHub Desktop from the official GitHub website and installed it on our machines. After installation, we logged in using our GitHub accounts, which enabled us to access our repositories.
Once everything was set up, we watched a tutorial on creating a repository. We learned how to initialize a new repository by clicking on "New Repository" in the GitHub interface, naming it appropriately, and choosing to initialize it with a README file to provide context about the project. After successfully creating the repository, we began testing commits by making changes to the README file. We used the command git add README.md to stage our changes, followed by git commit -m 'Initial commit with project description' to commit our updates. Finally, we pushed the changes using git push origin main to upload them to the remote repository.
However, we encountered a significant issue when two group members attempted to push their commits simultaneously. This caused a merge conflict, leading to some commits not appearing in the repository. With the help of our teacher, we learned how to properly handle commits and avoid such conflicts by ensuring that commits are made one at a time and by pulling the latest changes before pushing new ones. We also discussed the importance of coordinating our pushes to prevent conflicts, realizing that just as users need feedback from the system, team members require clear communication about ongoing changes to maintain a smooth workflow.
Reflection: This week was pivotal for establishing our groupâ€™s approach to configuration management throughout the project. Through our experiences with GitHub, I gained insight into the necessity of clear communication and coordination. For instance, one member suggested we use a group chat to inform each other when committing changes, which will help prevent future conflicts. This taught us that proper coordination is essential to maintain system status visibility, aligning with user experience principles.
Moving forward, we will adopt better practices, such as pulling the latest changes from the repository before making any new commits and communicating clearly about who is committing at what time. Additionally, this experience emphasized the value of branching in GitHub, which would allow us to work on separate features without interfering with each other's code. We plan to explore this feature more extensively to streamline our workflow and minimize disruptions.
Overall, this experience served as a critical learning moment that not only deepened my understanding of GitHub but also reinforced the importance of collaboration in software development. I feel better equipped to manage version control in future projects, understanding that a well-coordinated team can significantly improve efficiency and reduce errors.

